    /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int solve( unordered_map<TreeNode*,TreeNode*>mp,TreeNode* target){

    unordered_map<TreeNode*,int>vis;
    queue<TreeNode*>q;
    vis[target]=1;
    int maxi=0;q.push(target);
    while(!q.empty()){
        int size=q.size();
        int fl=0;
        while(size--){
            TreeNode* node=q.front();
            q.pop();
            if(node->left and !vis[node->left]){
                fl=1;
                vis[node->left]=1;
                q.push(node->left);
            }
            if(node->right and !vis[node->right]){
                fl=1;
                vis[node->right]=1;
                q.push(node->right);
            }
            if(mp[node] and !vis[mp[node]]){
                fl=1;
                vis[mp[node]]=1;
                q.push(mp[node]);
            }
            


        }
        if(fl)maxi+=1;

    }
    return maxi;
}
   TreeNode* bfsMapping(TreeNode* root, int start, unordered_map<TreeNode*,TreeNode*>&mp){
         queue<TreeNode*>q;
        q.push(root);
        TreeNode* target=NULL;
        while(!q.empty()){
            TreeNode* node=q.front();
            if(node->val==start)target=node;
            q.pop();
            if(node->left){
                q.push(node->left);
                mp[node->left]=node;
            }
            if(node->right){
                q.push(node->right);
                 mp[node->right]=node;
            }
        }
        return target;
   }
    int amountOfTime(TreeNode* root, int start) {
        
        unordered_map<TreeNode*,TreeNode*>mp;
        TreeNode* target=bfsMapping(root,start,mp);
       
        
       int maxi= solve(mp,target);
       return maxi;

    }
};