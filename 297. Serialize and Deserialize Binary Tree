/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
private:

    char ourToken = ' '; // All streams are seperated by tokens (which can be 
    // either spaces, tabs, or new lines. Here we are using a space;
    
    void serializeHelper(TreeNode* root, ostringstream& OSS) {
        if (!root) {
            OSS << '#' << ourToken; // Chase with a space (ourToken)
            return;
        }
        
        OSS << root->val << ourToken;
        serializeHelper(root->left, OSS);
        serializeHelper(root->right, OSS);
        return;
    }
    
    TreeNode* deserializeHelper(istringstream& ISS) {
        string nodeHolder; 
        ISS >> nodeHolder; 
       
        if (!nodeHolder.compare("#")) return nullptr; 
        TreeNode* newNode = new TreeNode(stoi(nodeHolder));
        newNode->left = deserializeHelper(ISS);
        newNode->right = deserializeHelper(ISS);
        return newNode;
    }
    
public:

    string serialize(TreeNode* root) {
        ostringstream OSS;
        serializeHelper(root, OSS);
        // cout << OSS.str() << endl;
        return OSS.str();
    }

    TreeNode* deserialize(string data) {
        istringstream ISS(data); 
        return deserializeHelper(ISS);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));